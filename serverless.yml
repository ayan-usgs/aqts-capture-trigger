service: aqts-capture-trigger

provider:
  name: aws
  region: ${opt:region, 'us-west-2'}
  stage: ${opt:stage, 'TEST'}
  runtime: python3.8
  memorySize: 128
  logRetentionInDays: 30
  deploymentBucket:
    name: iow-cloud-applications
  stackTags:
    "wma:applicationId": "Aquarius TS Capture Trigger"
    "wma:contact": "Andrew Yan ayan@usgs.gov"
    "wma:environment": ${self:provider.stage}
    "wma:taggingVersion": 0.0.1
    "wma:costCenter": TBD
    commitIdentifier: ${git:sha1}

custom:
  exportGitVariables: false
  accountNumber: ${ssm:/iow/aws/accountNumber}
  vpc:
    securityGroupIds: ${ssm:/iow/aqts-capture-trigger/${self:provider.stage}/securityGroupIds~split}
    subnetIds: ${ssm:/iow/aws/vpc/${self:provider.stage}/subnetIds~split}
  environments:
    TEST: test
    QA: qa
    PROD-EXTERNAL: prod-external

functions:
  aqtsCaptureTrigger:
    handler: trigger.handler.lambda_handler
    role: arn:aws:iam::${self:custom.accountNumber}:role/csr-Lambda-Role
    onError:
      Ref: snsTopic
    events:
      - s3:
          bucket: "triggering"
          event: s3:ObjectCreated:Put
          rules:
            - suffix: .json
      - sqs: arn:aws:sqs:${self:provider.region}:${self:custom.accountNumber}:aqts-capture-error-queue-${self:provider.stage}.fifo
    environment:
      STATE_MACHINE_ARN: arn:aws:states:${self:provider.region}:${self:custom.accountNumber}:stateMachine:aqts-capture-state-machine-${self:provider.stage}
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
    vpc: ${self:custom.vpc}

resources:
  Resources:
    snsTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: ${self:service}-${self:provider.stage}-topic
        TopicName: ${self:service}-${self:provider.stage}-topic
    concurrencyAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${self:provider.stage}-concurrency-alarm
        AlarmDescription: Notify when concurrency exceeds the specified threshold
        Namespace: 'AWS/Lambda'
        Dimensions:
          - Name: FunctionName
            Value:
              Ref: AqtsCaptureTriggerLambdaFunction
        MetricName: ConcurrentExecutions
        Statistic: Sum
        ComparisonOperator: GreaterThanOrEqualToThreshold
        Threshold: 230
        Period: 60
        EvaluationPeriods: 1
        AlarmActions:
          - Ref: snsTopic
    errorAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${self:provider.stage}-error-alarm
        AlarmDescription: Notify when number of errors exceeds the specified threshold
        Namespace: 'AWS/Lambda'
        Dimensions:
          - Name: FunctionName
            Value:
              Ref: AqtsCaptureTriggerLambdaFunction
        MetricName: Errors
        Statistic: Sum
        ComparisonOperator: GreaterThanOrEqualToThreshold
        Threshold: 10
        Period: 60
        EvaluationPeriods: 1
        AlarmActions:
          - Ref: snsTopic
    S3BucketTriggering:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: iow-retriever-capture-${self:custom.environments.${self:provider.stage}}
        AccessControl: Private
        LifecycleConfiguration:
          Rules:
            - ExpirationInDays: 1
              Status: Enabled
    AqtsCaptureTriggerLambdaPermissionTriggeringS3:
      Type: 'AWS::Lambda::Permission'
      Properties:
        FunctionName:
          'Fn::GetAtt':
            - AqtsCaptureTriggerLambdaFunction
            - Arn
        Principal: 's3.amazonaws.com'
        Action: 'lambda:InvokeFunction'
        SourceAccount:
          Ref: AWS::AccountId
        SourceArn: arn:aws:s3:::iow-retriever-capture-${self:custom.environments.${self:provider.stage}}

plugins:
  - serverless-plugin-git-variables
  - serverless-python-requirements

package:
  exclude:
    - node_modules/**
    - Dockerfile
    - .dockerignore
    - Jenkinsfile
    - package.json
    - package-lock.json
